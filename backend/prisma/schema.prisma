// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  name        String
  password    String
  avatar      String?
  role        Role     @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // OTP/2FA fields
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  backupCodes      String? // JSON array of backup codes

  // Relations
  photos            Photo[]
  albums            Album[]
  photoboothSessions PhotoboothSession[]
  collages          Collage[]
  otpVerifications  OtpVerification[]

  @@map("users")
}

model Photo {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  width       Int?
  height      Int?
  url         String
  thumbnailUrl String?
  cloudinaryPublicId String?
  
  // Metadata
  capturedAt  DateTime @default(now())
  location    String?
  device      String?
  filters     String[] // Array of applied filter names
  tags        String[] // Array of tags
  isPublic    Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Many-to-many relations
  albums      AlbumPhoto[]
  collages    CollagePhoto[]
  sessionId   String?
  session     PhotoboothSession? @relation(fields: [sessionId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("photos")
}

model Album {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverPhotoId String?
  isPublic    Boolean  @default(false)
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      AlbumPhoto[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("albums")
}

model AlbumPhoto {
  id      String @id @default(cuid())
  albumId String
  photoId String
  order   Int    @default(0)
  
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  photo   Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([albumId, photoId])
  @@map("album_photos")
}

model Collage {
  id          String   @id @default(cuid())
  title       String
  template    String   // Template type (grid, freeform, etc.)
  layout      String   // Layout configuration as JSON string
  width       Int
  height      Int
  url         String?  // Generated collage URL
  thumbnailUrl String?
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      CollagePhoto[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("collages")
}

model CollagePhoto {
  id        String  @id @default(cuid())
  collageId String
  photoId   String
  x         Float   // Position X
  y         Float   // Position Y
  width     Float   // Width in collage
  height    Float   // Height in collage
  rotation  Float   @default(0)
  zIndex    Int     @default(0)
  
  collage   Collage @relation(fields: [collageId], references: [id], onDelete: Cascade)
  photo     Photo   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([collageId, photoId])
  @@map("collage_photos")
}

model PhotoboothSession {
  id          String   @id @default(cuid())
  sessionName String?
  eventName   String?
  location    String?
  isActive    Boolean  @default(true)
  settings    Json     // Camera settings, timer settings, etc.
  
  // Statistics
  photosTaken Int      @default(0)
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("photobooth_sessions")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  type        SettingType @default(STRING)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model OtpVerification {
  id        String   @id @default(cuid())
  userId    String
  code      String   // 6-digit OTP code
  type      OtpType  // LOGIN, ENABLE_2FA, DISABLE_2FA, PASSWORD_RESET
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_verifications")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum OtpType {
  LOGIN
  ENABLE_2FA
  DISABLE_2FA
  PASSWORD_RESET
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}